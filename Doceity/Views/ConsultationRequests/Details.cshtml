@* File: Views/ConsultationRequests/Details.cshtml *@
@using Doceity.Models
@model Doceity.Models.ConsultationRequest
@inject UserManager<ApplicationUser> UserManager

@{
    ViewData["Title"] = "Dettaglio Richiesta Consulenza";
    Layout = "~/Pages/Shared/_Layout.cshtml";
    var currentUser = await UserManager.GetUserAsync(User);
    var expertUserNameForVideo = currentUser?.UserName ?? "expert_not_found";
}

<h1>@ViewData["Title"]</h1>

@* ... (Messaggi TempData come prima) ... *@
@if (TempData["SuccessMessage"] != null)
{
     <div class="alert alert-success">@TempData["SuccessMessage"]</div>
}
@if (TempData["ErrorMessage"] != null)
{
     <div class="alert alert-danger">@TempData["ErrorMessage"]</div>
}
@if (TempData["WarningMessage"] != null)
{
     <div class="alert alert-warning">@TempData["WarningMessage"]</div>
}

@if (Model == null)
{
    <div class="alert alert-warning">Richiesta non trovata.</div>
}
else
{
    <div>
        <h4>Richiesta #@Model.ConsultationRequestId da @Model.RequestingUser?.FirstName @Model.RequestingUser?.LastName</h4>
        <hr />
        @* ... (DL con i dettagli della richiesta come prima) ... *@
        <dl class="row">
            <dt class="col-sm-3">Utente Richiedente:</dt>
            <dd class="col-sm-9">@Model.RequestingUser?.FirstName @Model.RequestingUser?.LastName (@Model.RequestingUser?.Email)</dd>
            <dt class="col-sm-3">Servizio Richiesto:</dt>
            <dd class="col-sm-9">@(Model.RequestedExpertService?.Title ?? "Nessun servizio specifico")</dd>
            <dt class="col-sm-3">Data/Ora Proposta (UTC):</dt>
            <dd class="col-sm-9">@Model.ProposedDateTime.ToString("dddd, dd MMMM yyyy 'alle' HH:mm")</dd>
            <dt class="col-sm-3">Messaggio Utente:</dt>
            <dd class="col-sm-9" style="white-space: pre-wrap;">@(string.IsNullOrWhiteSpace(Model.UserMessage) ? "Nessun messaggio fornito." : Model.UserMessage)</dd>
            <dt class="col-sm-3">Data Invio Richiesta:</dt>
            <dd class="col-sm-9">@Model.RequestTimestamp.ToLocalTime().ToString("g")</dd>
            <dt class="col-sm-3">Stato Attuale:</dt>
            <dd class="col-sm-9"><span class="badge @GetStatusBadgeClass(Model.Status)">@Html.DisplayFor(model => model.Status)</span></dd>
            @if (Model.ResponseTimestamp.HasValue)
            {
                <dt class="col-sm-3">Data Tua Risposta:</dt>
                <dd class="col-sm-9">@Model.ResponseTimestamp.Value.ToLocalTime().ToString("g")</dd>
            }
            @if (!string.IsNullOrWhiteSpace(Model.ExpertResponseMessage))
            {
                <dt class="col-sm-3">Tuo Messaggio/Motivazione:</dt>
                <dd class="col-sm-9" style="white-space: pre-wrap;">@Model.ExpertResponseMessage</dd>
            }
            @if (!string.IsNullOrWhiteSpace(Model.VideoRoomIdentifier) && Model.Status == ConsultationRequestStatus.Accepted)
            {
                <dt class="col-sm-3">ID Stanza Video:</dt>
                <dd class="col-sm-9"><code>@Model.VideoRoomIdentifier</code></dd>
            }
        </dl>
    </div>

    @if (Model.Status == ConsultationRequestStatus.Pending)
    {
        <hr />
        <h4>Rispondi alla Richiesta</h4>
        @* ... (Form Accetta e Rifiuta come prima) ... *@
        <div class="row">
            <div class="col-md-6 mb-3">
                <form asp-action="Accept" asp-route-id="@Model.ConsultationRequestId" method="post">
                    @Html.AntiForgeryToken()
                    <div class="mb-3"><label for="acceptMessage" class="form-label">Messaggio Opzionale (Accettazione):</label><textarea id="acceptMessage" name="responseMessage" class="form-control" rows="3"></textarea></div>
                    <button type="submit" class="btn btn-success"><i class="bi bi-check-circle-fill"></i> Accetta</button>
                </form>
            </div>
            <div class="col-md-6 mb-3">
                <form asp-action="Reject" asp-route-id="@Model.ConsultationRequestId" method="post">
                    @Html.AntiForgeryToken()
                    <div class="mb-3"><label for="rejectMessage" class="form-label">Motivazione Rifiuto (Obbligatoria):</label><textarea id="rejectMessage" name="responseMessage" class="form-control" rows="3" required></textarea>@Html.ValidationMessage("responseMessage", "", new { @class = "text-danger" })</div>
                    <button type="submit" class="btn btn-danger"><i class="bi bi-x-circle-fill"></i> Rifiuta</button>
                </form>
            </div>
        </div>
    }
    else if (Model.Status == ConsultationRequestStatus.Accepted)
    {
        <hr />
        <h4>Sessione Accettata</h4>
        @if (Model.IsSessionJoinable && !string.IsNullOrEmpty(Model.VideoRoomIdentifier))
        {
            <a asp-controller="Video" asp-action="Room"
               asp-route-roomName="@Model.VideoRoomIdentifier"
               asp-route-userName="@expertUserNameForVideo"
               class="btn btn-danger me-2">
                <i class="bi bi-camera-video-fill"></i> Entra Video
            </a>
        }
        else if (Model.ProposedDateTime > DateTime.UtcNow)
        {
            <div class="alert alert-info small">Questa consulenza è accettata e inizierà il @Model.ProposedDateTime.ToLocalTime().ToString("dd/MM/yyyy 'alle' HH:mm").</div>
        }
        else
        {
            <div class="alert alert-secondary small">Questa consulenza accettata è terminata o la finestra per partecipare è chiusa.</div>
        }
        @* --- FORM PER ANNULLAMENTO DA PARTE DELL'ESPERTO --- *@
        <form asp-action="CancelByExpertConfirmed" asp-route-id="@Model.ConsultationRequestId" method="post" class="mt-3">
            @Html.AntiForgeryToken()
            <div class="mb-3">
                <label for="cancellationReason" class="form-label">Motivazione per l'Annullamento (Obbligatoria se annulli):</label>
                <textarea id="cancellationReason" name="cancellationReason" class="form-control" rows="3" placeholder="L'utente verrà notificato di questo annullamento."></textarea>
                @* Potresti voler mostrare un errore per cancellationReason se il controller ha fatto redirect qui con un errore ModelState *@
                @Html.ValidationMessage("cancellationReason", "", new { @class = "text-danger" })
            </div>
            <button type="submit" class="btn btn-warning" onclick="return confirm('Sei sicuro di voler annullare questa consulenza già accettata? L\'utente verrà notificato.');">
                <i class="bi bi-calendar-x-fill"></i> Annulla Questa Consulenza
            </button>
        </form>
    }

    <hr />
    <div class="mt-3">
        <a asp-action="Index" class="btn btn-secondary"><i class="bi bi-arrow-left"></i> Torna alla Lista</a>
    </div>
}

@functions {
    string GetStatusBadgeClass(ConsultationRequestStatus status) { /* ... come prima ... */ return ""; }
}

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}